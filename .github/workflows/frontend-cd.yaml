name: Frontend Continuous Deployment

# Triggers (manual & auto)
on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  NODE_VERSION: 18
  AWS_REGION: us-west-2
  ECR_REPO: movie-picture-project-repo
  REACT_API_URL: testAPI
  ECR_CLUSTER_NAME: movie-picture-project-cluster

jobs:
  Frontend-Lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # set up node.js environment
      - name: Node.js environment setup
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      # Restore cache && Install dependencies
      - name: Cache restore
        uses: ylemkimon/cache-restore@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: cd frontend && npm ci
      # Run the linter
      - name: Linting
        run: cd frontend && npm run lint
  Frontend-Test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # set up node.js environment
      - name: Node.js environment setup
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      # Restore cache && Install dependencies
      - name: Cache restore
        uses: ylemkimon/cache-restore@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: cd frontend && npm ci
      # Run the tests
      - name: Testing
        run: cd frontend && npm run test
  Frontend-Deploy:
    needs: [Frontend-Lint, Frontend-Test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # Install kubectl
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest' # default is latest stable
        id: kubectl-tool-installer
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
      # AWS ECR Login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPO }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg REACT_APP_MOVIE_API_URL=${{ env.REACT_API_URL }} -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ./frontend
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        # error handling
        if: success()
      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ env.ECR_CLUSTER_NAME }}
      - name: Deploy to EKS
        run: |
          kubectl apply -k ./frontend

# kubectl apply -k ./frontend/k8s --validate=false
